<h2 id="single-entry-shorthand-syntax">Single Entry (Shorthand) Syntax<a href="#single-entry-shorthand-syntax" aria-hidden="true"><span class="icon icon-link"></span></a></h2><p>Usage: <code>entry: string|Array&lt;string&gt;</code></p><p><strong>webpack.config.js</strong></p><pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  entry<span class="token punctuation">:</span> <span class="token string">&apos;./path/to/my/entry/file.js&apos;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>The single entry syntax for the <code>entry</code> property is a shorthand for:</p><p><strong>webpack.config.js</strong></p><pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    main<span class="token punctuation">:</span> <span class="token string">&apos;./path/to/my/entry/file.js&apos;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><blockquote class="tip">
<p><strong>What happens when you pass an array to <code>entry</code>?</strong> Passing an array of file paths to the <code>entry</code> property creates what is known as a <strong>&quot;multi-main entry&quot;</strong>. This is useful when you would like to inject multiple dependent files together and graph their dependencies into one &quot;chunk&quot;.</p>
</blockquote><p>This is a great choice when you are looking to quickly setup a webpack configuration for an application or tool with one entry point (i.e. a library). However, there is not much flexibility in extending or scaling your configuration with this syntax.</p>