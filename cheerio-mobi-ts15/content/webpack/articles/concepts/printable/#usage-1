<h2 id="usage-1">Usage<a href="#usage-1" aria-hidden="true"><span class="icon icon-link"></span></a></h2>
<p>Since <strong>plugins</strong> can take arguments/options, you must pass a <code>new</code> instance to the <code>plugins</code> property in your webpack configuration.</p>
<p>Depending on how you are using webpack, there are multiple ways to use plugins.</p>
<h3 id="configuration-1">Configuration<a href="#configuration-1" aria-hidden="true"><span class="icon icon-link"></span></a></h3>
<p><strong>webpack.config.js</strong></p>
<pre><code class="hljs language-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&apos;html-webpack-plugin&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//installed via npm</span>
<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&apos;webpack&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//to access built-in plugins</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&apos;path&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  entry<span class="token punctuation">:</span> <span class="token string">&apos;./path/to/my/entry/file.js&apos;</span><span class="token punctuation">,</span>
  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    filename<span class="token punctuation">:</span> <span class="token string">&apos;my-first-webpack.bundle.js&apos;</span><span class="token punctuation">,</span>
    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&apos;dist&apos;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        test<span class="token punctuation">:</span> <span class="token regex">/\.(js|jsx)$/</span><span class="token punctuation">,</span>
        use<span class="token punctuation">:</span> <span class="token string">&apos;babel-loader&apos;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProgressPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>template<span class="token punctuation">:</span> <span class="token string">&apos;./src/index.html&apos;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h3 id="node-api">Node API<a href="#node-api" aria-hidden="true"><span class="icon icon-link"></span></a></h3>
<p>When using the Node API, you can also pass plugins via the <code>plugins</code> property in the configuration.</p>
<p><strong>some-node-script.js</strong></p>
<pre><code class="hljs language-javascript"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&apos;webpack&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//to access webpack runtime</span>
<span class="token keyword">const</span> configuration <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&apos;./webpack.config.js&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProgressPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>

compiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<blockquote class="tip">
    <p>Did you know: The example seen above is extremely similar to the <a href="https://github.com/webpack/webpack/blob/e7087ffeda7fa37dfe2ca70b5593c6e899629a2c/bin/webpack.js#L290-L292">webpack runtime itself!</a> There are lots of great usage examples hiding in the <a href="https://github.com/webpack/webpack">webpack source code</a> that you can apply to your own configurations and scripts!</p>
</blockquote>
<h1 id="configuration-2">Configuration<a href="#configuration-2" aria-hidden="true"><span class="icon icon-link"></span></a></h1>
<p>You may have noticed that few webpack configurations look exactly alike. This is because <strong>webpack&apos;s configuration file is a JavaScript file that exports a webpack <a href="/configuration/">configuration</a>.</strong> This configuration is then processed by webpack based upon its defined properties.</p>
<p>Because it&apos;s a standard Node.js CommonJS module, you <strong>can do the following</strong>:</p>
<ul>
    <li>import other files via <code>require(...)</code></li>
    <li>use utilities on npm via <code>require(...)</code></li>
    <li>use JavaScript control flow expressions, e.g. the <code>?:</code> operator</li>
    <li>use constants or variables for often used values</li>
    <li>write and execute functions to generate a part of the configuration</li>
</ul>
<p>Use these features when appropriate.</p>
<p>While they are technically feasible, <strong>the following practices should be avoided</strong>:</p>
<ul>
    <li>Access CLI arguments, when using the webpack CLI (instead write your own CLI, or <a href="/configuration/configuration-types/">use <code>--env</code></a>)</li>
    <li>Export non-deterministic values (calling webpack twice should result in the same output files)</li>
    <li>Write long configurations (instead split the configuration into multiple files)</li>
</ul>
<blockquote class="tip">
    <p>The most important part to take away from this document is that there are many different ways to format and style your webpack configuration. The key is to stick with something consistent that you and your team can understand and maintain.</p>
</blockquote>
<p>The examples below describe how webpack&apos;s configuration can be both expressive and configurable because <em>it is code</em>:</p>