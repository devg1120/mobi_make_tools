<h2 id="scenarios">Scenarios<a href="#scenarios" aria-hidden="true"><span class="icon icon-link"></span></a></h2>
<p>Below is a list of entry configurations and their real-world use cases:</p>
<h3 id="separate-app-and-vendor-entries">Separate App and Vendor Entries<a href="#separate-app-and-vendor-entries" aria-hidden="true"><span class="icon icon-link"></span></a></h3>
<blockquote class="tip">
    <p>In webpack version &lt; 4 it was common to add vendors as a separate entry point to compile it as a separate file (in combination with the <code>CommonsChunkPlugin</code>). <br><br> This is discouraged in webpack 4. Instead, the <a href="/configuration/optimization/#optimizationsplitchunks"><code>optimization.splitChunks</code></a> option takes care of separating vendors and app modules and creating a separate file. <strong>Do not</strong> create an entry for vendors or other stuff that is not the starting point of execution.</p>
</blockquote>
<h3 id="multi-page-application">Multi Page Application<a href="#multi-page-application" aria-hidden="true"><span class="icon icon-link"></span></a></h3>
<p><strong>webpack.config.js</strong></p>
<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    pageOne<span class="token punctuation">:</span> <span class="token string">&apos;./src/pageOne/index.js&apos;</span><span class="token punctuation">,</span>
    pageTwo<span class="token punctuation">:</span> <span class="token string">&apos;./src/pageTwo/index.js&apos;</span><span class="token punctuation">,</span>
    pageThree<span class="token punctuation">:</span> <span class="token string">&apos;./src/pageThree/index.js&apos;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p><strong>What does this do?</strong> We are telling webpack that we would like 3 separate dependency graphs (like the above example).</p>
<p><strong>Why?</strong> In a multi-page application, the server is going to fetch a new HTML document for you. The page reloads this new document and assets are redownloaded. However, this gives us the unique opportunity to do things like using <a href="/configuration/optimization/#optimizationsplitchunks"><code>optimization.splitChunks</code></a> to create bundles of shared application code between each page. Multi-page applications that reuse a lot of code/modules between entry points can greatly benefit from these techniques, as the number of entry points increases.</p>
<blockquote class="tip">
    <p>As a rule of thumb: Use exactly one entry point for each HTML document.</p>
</blockquote>
<h1 id="output-1">Output<a href="#output-1" aria-hidden="true"><span class="icon icon-link"></span></a></h1>
<p>Configuring the <code>output</code> configuration options tells webpack how to write the compiled files to disk. Note that, while there can be multiple <code>entry</code> points, only one <code>output</code> configuration is specified.</p>