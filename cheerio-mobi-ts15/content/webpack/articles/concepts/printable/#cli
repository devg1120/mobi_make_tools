<h3 id="cli">CLI<a href="#cli" aria-hidden="true"><span class="icon icon-link"></span></a></h3>
<p>You can also use loaders through the CLI:</p>
<pre><code class="hljs language-bash">webpack --module-bind jade-loader --module-bind <span class="token string">&apos;css=style-loader!css-loader&apos;</span></code></pre>
<p>This uses the <code>jade-loader</code> for <code>.jade</code> files, and the <a href="/loaders/style-loader"><code>style-loader</code></a> and <a href="/loaders/css-loader"><code>css-loader</code></a> for <code>.css</code> files.</p>
<h2 id="loader-features">Loader Features<a href="#loader-features" aria-hidden="true"><span class="icon icon-link"></span></a></h2>
<ul>
    <li>Loaders can be chained. Each loader in the chain applies transformations to the processed resource. A chain is executed in reverse order. The first loader passes its result (resource with applied transformations) to the next one, and so forth. Finally, webpack expects JavaScript to be returned by the last loader in the chain.</li>
    <li>Loaders can be synchronous or asynchronous.</li>
    <li>Loaders run in Node.js and can do everything that&#x2019;s possible there.</li>
    <li>Loaders can be configured with an <code>options</code> object (using <code>query</code> parameters to set options is still supported but has been deprecated).</li>
    <li>Normal modules can export a loader in addition to the normal <code>main</code> via <code>package.json</code> with the <code>loader</code> field.</li>
    <li>Plugins can give loaders more features.</li>
    <li>Loaders can emit additional arbitrary files.</li>
</ul>
<p>Loaders provide a way to customize the output through their preprocessing functions. Users now have more flexibility to include fine-grained logic such as compression, packaging, language translations and <a href="/loaders">more</a>.</p>
<h2 id="resolving-loaders">Resolving Loaders<a href="#resolving-loaders" aria-hidden="true"><span class="icon icon-link"></span></a></h2>
<p>Loaders follow the standard <a href="/concepts/module-resolution/">module resolution</a>. In most cases it will be loaded from the <a href="/concepts/module-resolution/#module-paths">module path</a> (think <code>npm install</code>, <code>node_modules</code>).</p>
<p>A loader module is expected to export a function and be written in Node.js compatible JavaScript. They are most commonly managed with npm, but you can also have custom loaders as files within your application. By convention, loaders are usually named <code>xxx-loader</code> (e.g. <code>json-loader</code>). See <a href="/contribute/writing-a-loader/">&quot;Writing a Loader&quot;</a> for more information.</p>
<h1 id="plugins-1">Plugins<a href="#plugins-1" aria-hidden="true"><span class="icon icon-link"></span></a></h1>
<p><strong>Plugins</strong> are the <a href="https://github.com/webpack/tapable">backbone</a> of webpack. webpack itself is built on the <strong>same plugin system</strong> that you use in your webpack configuration!</p>
<p>They also serve the purpose of doing <strong>anything else</strong> that a <a href="/concepts/loaders">loader</a> cannot do.</p>
<h2 id="anatomy">Anatomy<a href="#anatomy" aria-hidden="true"><span class="icon icon-link"></span></a></h2>
<p>A webpack <strong>plugin</strong> is a JavaScript object that has an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"><code>apply</code></a> method. This <code>apply</code> method is called by the webpack compiler, giving access to the <strong>entire</strong> compilation lifecycle.</p>
<p><strong>ConsoleLogOnBuildWebpackPlugin.js</strong></p>
<pre><code class="hljs language-javascript"><span class="token keyword">const</span> pluginName <span class="token operator">=</span> <span class="token string">&apos;ConsoleLogOnBuildWebpackPlugin&apos;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">ConsoleLogOnBuildWebpackPlugin</span> <span class="token punctuation">{</span>
  <span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>run<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">,</span> compilation <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&apos;The webpack build process is starting!!!&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> ConsoleLogOnBuildWebpackPlugin<span class="token punctuation">;</span></code></pre>
<p>The first parameter of the tap method of the compiler hook should be a camelized version of the plugin name. It is advisable to use a constant for this so it can be reused in all hooks.</p>
<h2 id="usage-1">Usage<a href="#usage-1" aria-hidden="true"><span class="icon icon-link"></span></a></h2>
<p>Since <strong>plugins</strong> can take arguments/options, you must pass a <code>new</code> instance to the <code>plugins</code> property in your webpack configuration.</p>
<p>Depending on how you are using webpack, there are multiple ways to use plugins.</p>