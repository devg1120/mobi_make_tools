<body><pre>
[<a>Assignment</a>] = [<a>ExpressionList</a>] [<a>assign_op</a>] [<a>ExpressionList</a>] .

[<a>assign_op</a>] = [ [<a>add_op</a>] | [<a>mul_op</a>] ] "=" .
</pre><p>
Each left-hand side operand must be [<a>addressable</a>],
a map index expression, or (for <code>=</code> assignments only) the
[<a>blank identifier</a>].
Operands may be parenthesized.
</p><pre>
x = 1
*p = f()
a[i] = 23
(k) = <-ch  // same as: k = <-ch
</pre><p>
An <i>assignment operation</i> <code>x</code> <i>op</i><code>=</code>
<code>y</code> where <i>op</i> is a binary [<a>arithmetic operator</a>]
is equivalent to <code>x</code> <code>=</code> <code>x</code> <i>op</i>
<code>(y)</code> but evaluates <code>x</code>
only once.  The <i>op</i><code>=</code> construct is a single token.
In assignment operations, both the left- and right-hand expression lists
must contain exactly one single-valued expression, and the left-hand
expression must not be the blank identifier.
</p><pre>
a[i] <<= 2
i &^= 1<<n
</pre><p>
A tuple assignment assigns the individual elements of a multi-valued
operation to a list of variables.  There are two forms.  In the
first, the right hand operand is a single multi-valued expression
such as a function call, a [<a>channel</a>] or
[<a>map</a>] operation, or a [<a>type assertion</a>].
The number of operands on the left
hand side must match the number of values.  For instance, if
<code>f</code> is a function returning two values,
</p><pre>
x, y = f()
</pre><p>
assigns the first value to <code>x</code> and the second to <code>y</code>.
In the second form, the number of operands on the left must equal the number
of expressions on the right, each of which must be single-valued, and the
<i>n</i>th expression on the right is assigned to the <i>n</i>th
operand on the left:
</p><pre>
one, two, three = '一', '二', '三'
</pre><p>
The [<a>blank identifier</a>] provides a way to
ignore right-hand side values in an assignment:
</p><pre>
_ = x       // evaluate x but ignore it
x, _ = f()  // evaluate f() but ignore second result value
</pre><p>
The assignment proceeds in two phases.
First, the operands of [<a>index expressions</a>]
and [<a>pointer indirections</a>]
(including implicit pointer indirections in [<a>selectors</a>])
on the left and the expressions on the right are all
[<a>evaluated in the usual order</a>].
Second, the assignments are carried out in left-to-right order.
</p><pre>
a, b = b, a  // exchange a and b

x := []int{1, 2, 3}
i := 0
i, x[i] = 1, 2  // set i = 1, x[0] = 2

i = 0
x[i], i = 2, 1  // set x[0] = 2, i = 1

x[0], x[0] = 1, 2  // set x[0] = 1, then x[0] = 2 (so x[0] == 2 at end)

x[1], x[3] = 4, 5  // set x[1] = 4, then panic setting x[3] = 5.

type Point struct { x, y int }
var p *Point
x[2], p.x = 6, 7  // set x[2] = 6, then panic setting p.x = 7

i = 2
x = []int{3, 5, 7}
for i, x[i] = range x {  // set i, x[2] = 0, x[0]
	break
}
// after this loop, i == 0 and x == []int{3, 5, 3}
</pre><p>
In assignments, each value must be [<a>assignable</a>]
to the type of the operand to which it is assigned, with the following special cases:
</p><ol>
<li>
	Any typed value may be assigned to the blank identifier.
</li>

<li>
	If an untyped constant
	is assigned to a variable of interface type or the blank identifier,
	the constant is first implicitly [<a>converted</a>] to its
	 [<a>default type</a>].
</li>

<li>
	If an untyped boolean value is assigned to a variable of interface type or
	the blank identifier, it is first implicitly converted to type <code>bool</code>.
</li>
</ol></body>