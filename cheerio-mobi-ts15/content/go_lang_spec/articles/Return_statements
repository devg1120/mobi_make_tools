<body><p>
A "return" statement in a function <code>F</code> terminates the execution
of <code>F</code>, and optionally provides one or more result values.
Any functions [<a>deferred</a>] by <code>F</code>
are executed before <code>F</code> returns to its caller.
</p><pre>
[<a>ReturnStmt</a>] = "return" [ [<a>ExpressionList</a>] ] .
</pre><p>
In a function without a result type, a "return" statement must not
specify any result values.
</p><pre>
func noResult() {
	return
}
</pre><p>
There are three ways to return values from a function with a result
type:
</p><ol>
	<li>The return value or values may be explicitly listed
		in the "return" statement. Each expression must be single-valued
		and [<a>assignable</a>]
		to the corresponding element of the function's result type.
<pre>
func simpleF() int {
	return 2
}

func complexF1() (re float64, im float64) {
	return -7.0, -4.0
}
</pre>
	</li>
	<li>The expression list in the "return" statement may be a single
		call to a multi-valued function. The effect is as if each value
		returned from that function were assigned to a temporary
		variable with the type of the respective value, followed by a
		"return" statement listing these variables, at which point the
		rules of the previous case apply.
<pre>
func complexF2() (re float64, im float64) {
	return complexF1()
}
</pre>
	</li>
	<li>The expression list may be empty if the function's result
		type specifies names for its [<a>result parameters</a>].
		The result parameters act as ordinary local variables
		and the function may assign values to them as necessary.
		The "return" statement returns the values of these variables.
<pre>
func complexF3() (re float64, im float64) {
	re = 7.0
	im = 4.0
	return
}

func (devnull) Write(p []byte) (n int, _ error) {
	n = len(p)
	return
}
</pre>
	</li>
</ol><p>
Regardless of how they are declared, all the result values are initialized to
the [<a>zero values</a>] for their type upon entry to the
function. A "return" statement that specifies results sets the result parameters before
any deferred functions are executed.
</p><p>
Implementation restriction: A compiler may disallow an empty expression list
in a "return" statement if a different entity (constant, type, or variable)
with the same name as a result parameter is in
[<a>scope</a>] at the place of the return.
</p><pre>
func f(n int) (res int, err error) {
	if _, err := f(n-1); err != nil {
		return  // invalid return statement: err is shadowed
	}
	return
}
</pre></body>