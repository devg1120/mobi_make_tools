<body><p>
A constant declaration binds a list of identifiers (the names of
the constants) to the values of a list of [<a>constant expressions</a>].
The number of identifiers must be equal
to the number of expressions, and the <i>n</i>th identifier on
the left is bound to the value of the <i>n</i>th expression on the
right.
</p><pre>
[<a>ConstDecl</a>]      = "const" ( [<a>ConstSpec</a>] | "(" { [<a>ConstSpec</a>] ";" } ")" ) .
[<a>ConstSpec</a>]      = [<a>IdentifierList</a>] [ [ [<a>Type</a>] ] "=" [<a>ExpressionList</a>] ] .

[<a>IdentifierList</a>] = [<a>identifier</a>] { "," [<a>identifier</a>] } .
[<a>ExpressionList</a>] = [<a>Expression</a>] { "," [<a>Expression</a>] } .
</pre><p>
If the type is present, all constants take the type specified, and
the expressions must be [<a>assignable</a>] to that type.
If the type is omitted, the constants take the
individual types of the corresponding expressions.
If the expression values are untyped [<a>constants</a>],
the declared constants remain untyped and the constant identifiers
denote the constant values. For instance, if the expression is a
floating-point literal, the constant identifier denotes a floating-point
constant, even if the literal's fractional part is zero.
</p><pre>
const Pi float64 = 3.14159265358979323846
const zero = 0.0         // untyped floating-point constant
const (
	size int64 = 1024
	eof        = -1  // untyped integer constant
)
const a, b, c = 3, 4, "foo"  // a = 3, b = 4, c = "foo", untyped integer and string constants
const u, v float32 = 0, 3    // u = 0.0, v = 3.0
</pre><p>
Within a parenthesized <code>const</code> declaration list the
expression list may be omitted from any but the first ConstSpec.
Such an empty list is equivalent to the textual substitution of the
first preceding non-empty expression list and its type if any.
Omitting the list of expressions is therefore equivalent to
repeating the previous list.  The number of identifiers must be equal
to the number of expressions in the previous list.
Together with the [<a><code>iota</code> constant generator</a>]
this mechanism permits light-weight declaration of sequential values:
</p><pre>
const (
	Sunday = iota
	Monday
	Tuesday
	Wednesday
	Thursday
	Friday
	Partyday
	numberOfDays  // this constant is not exported
)
</pre></body>