<body><p>
A primary expression of the form
</p><pre>
a[x]
</pre><p>
denotes the element of the array, pointer to array, slice, string or map <code>a</code> indexed by <code>x</code>.
The value <code>x</code> is called the <i>index</i> or <i>map key</i>, respectively.
The following rules apply:
</p><p>
If <code>a</code> is not a map:
</p><ul>
	<li>the index <code>x</code> must be of integer type or an untyped constant</li>
	<li>a constant index must be non-negative and
	    [<a>representable</a>] by a value of type <code>int</code></li>
	<li>a constant index that is untyped is given type <code>int</code></li>
	<li>the index <code>x</code> is <i>in range</i> if <code>0 <= x < len(a)</code>,
	    otherwise it is <i>out of range</i></li>
</ul><p>
For <code>a</code> of [<a>array type</a>] <code>A</code>:
</p><ul>
	<li>a [<a>constant</a>] index must be in range</li>
	<li>if <code>x</code> is out of range at run time,
	    a [<a>run-time panic</a>] occurs</li>
	<li><code>a[x]</code> is the array element at index <code>x</code> and the type of
	    <code>a[x]</code> is the element type of <code>A</code></li>
</ul><p>
For <code>a</code> of [<a>pointer</a>] to array type:
</p><ul>
	<li><code>a[x]</code> is shorthand for <code>(*a)[x]</code></li>
</ul><p>
For <code>a</code> of [<a>slice type</a>] <code>S</code>:
</p><ul>
	<li>if <code>x</code> is out of range at run time,
	    a [<a>run-time panic</a>] occurs</li>
	<li><code>a[x]</code> is the slice element at index <code>x</code> and the type of
	    <code>a[x]</code> is the element type of <code>S</code></li>
</ul><p>
For <code>a</code> of [<a>string type</a>]:
</p><ul>
	<li>a [<a>constant</a>] index must be in range
	    if the string <code>a</code> is also constant</li>
	<li>if <code>x</code> is out of range at run time,
	    a [<a>run-time panic</a>] occurs</li>
	<li><code>a[x]</code> is the non-constant byte value at index <code>x</code> and the type of
	    <code>a[x]</code> is <code>byte</code></li>
	<li><code>a[x]</code> may not be assigned to</li>
</ul><p>
For <code>a</code> of [<a>map type</a>] <code>M</code>:
</p><ul>
	<li><code>x</code>'s type must be
	    [<a>assignable</a>]
	    to the key type of <code>M</code></li>
	<li>if the map contains an entry with key <code>x</code>,
	    <code>a[x]</code> is the map element with key <code>x</code>
	    and the type of <code>a[x]</code> is the element type of <code>M</code></li>
	<li>if the map is <code>nil</code> or does not contain such an entry,
	    <code>a[x]</code> is the [<a>zero value</a>]
	    for the element type of <code>M</code></li>
</ul><p>
Otherwise <code>a[x]</code> is illegal.
</p><p>
An index expression on a map <code>a</code> of type <code>map[K]V</code>
used in an [<a>assignment</a>] or initialization of the special form
</p><pre>
v, ok = a[x]
v, ok := a[x]
var v, ok = a[x]
</pre><p>
yields an additional untyped boolean value. The value of <code>ok</code> is
<code>true</code> if the key <code>x</code> is present in the map, and
<code>false</code> otherwise.
</p><p>
Assigning to an element of a <code>nil</code> map causes a
[<a>run-time panic</a>].
</p></body>