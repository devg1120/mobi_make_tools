<body><p>
An import declaration states that the source file containing the declaration
depends on functionality of the <i>imported</i> package
([<a>Â§Program initialization and execution</a>])
and enables access to [<a>exported</a>] identifiers
of that package.
The import names an identifier (PackageName) to be used for access and an ImportPath
that specifies the package to be imported.
</p><pre>
[<a>ImportDecl</a>]       = "import" ( [<a>ImportSpec</a>] | "(" { [<a>ImportSpec</a>] ";" } ")" ) .
[<a>ImportSpec</a>]       = [ "." | [<a>PackageName</a>] ] [<a>ImportPath</a>] .
[<a>ImportPath</a>]       = [<a>string_lit</a>] .
</pre><p>
The PackageName is used in [<a>qualified identifiers</a>]
to access exported identifiers of the package within the importing source file.
It is declared in the [<a>file block</a>].
If the PackageName is omitted, it defaults to the identifier specified in the
[<a>package clause</a>] of the imported package.
If an explicit period (<code>.</code>) appears instead of a name, all the
package's exported identifiers declared in that package's
[<a>package block</a>] will be declared in the importing source
file's file block and must be accessed without a qualifier.
</p><p>
The interpretation of the ImportPath is implementation-dependent but
it is typically a substring of the full file name of the compiled
package and may be relative to a repository of installed packages.
</p><p>
Implementation restriction: A compiler may restrict ImportPaths to
non-empty strings using only characters belonging to
[<a>Unicode's</a>]
L, M, N, P, and S general categories (the Graphic characters without
spaces) and may also exclude the characters
<code>!"#$%&'()*,:;<=>?[\]^`{|}</code>
and the Unicode replacement character U+FFFD.
</p><p>
Assume we have compiled a package containing the package clause
<code>package math</code>, which exports function <code>Sin</code>, and
installed the compiled package in the file identified by
<code>"lib/math"</code>.
This table illustrates how <code>Sin</code> is accessed in files
that import the package after the
various types of import declaration.
</p><pre>
Import declaration          Local name of Sin

import   "lib/math"         math.Sin
import m "lib/math"         m.Sin
import . "lib/math"         Sin
</pre><p>
An import declaration declares a dependency relation between
the importing and imported package.
It is illegal for a package to import itself, directly or indirectly,
or to directly import a package without
referring to any of its exported identifiers. To import a package solely for
its side-effects (initialization), use the [<a>blank</a>]
identifier as explicit package name:
</p><pre>
import _ "lib/math"
</pre></body>