<body><p>
If <code>M</code> is in the [<a>method set</a>] of type <code>T</code>,
<code>T.M</code> is a function that is callable as a regular function
with the same arguments as <code>M</code> prefixed by an additional
argument that is the receiver of the method.
</p><pre>
[<a>MethodExpr</a>]    = [<a>ReceiverType</a>] "." [<a>MethodName</a>] .
[<a>ReceiverType</a>]  = [<a>Type</a>] .
</pre><p>
Consider a struct type <code>T</code> with two methods,
<code>Mv</code>, whose receiver is of type <code>T</code>, and
<code>Mp</code>, whose receiver is of type <code>*T</code>.
</p><pre>
type T struct {
	a int
}
func (tv  T) Mv(a int) int         { return 0 }  // value receiver
func (tp *T) Mp(f float32) float32 { return 1 }  // pointer receiver

var t T
</pre><p>
The expression
</p><pre>
T.Mv
</pre><p>
yields a function equivalent to <code>Mv</code> but
with an explicit receiver as its first argument; it has signature
</p><pre>
func(tv T, a int) int
</pre><p>
That function may be called normally with an explicit receiver, so
these five invocations are equivalent:
</p><pre>
t.Mv(7)
T.Mv(t, 7)
(T).Mv(t, 7)
f1 := T.Mv; f1(t, 7)
f2 := (T).Mv; f2(t, 7)
</pre><p>
Similarly, the expression
</p><pre>
(*T).Mp
</pre><p>
yields a function value representing <code>Mp</code> with signature
</p><pre>
func(tp *T, f float32) float32
</pre><p>
For a method with a value receiver, one can derive a function
with an explicit pointer receiver, so
</p><pre>
(*T).Mv
</pre><p>
yields a function value representing <code>Mv</code> with signature
</p><pre>
func(tv *T, a int) int
</pre><p>
Such a function indirects through the receiver to create a value
to pass as the receiver to the underlying method;
the method does not overwrite the value whose address is passed in
the function call.
</p><p>
The final case, a value-receiver function for a pointer-receiver method,
is illegal because pointer-receiver methods are not in the method set
of the value type.
</p><p>
Function values derived from methods are called with function call syntax;
the receiver is provided as the first argument to the call.
That is, given <code>f := T.Mv</code>, <code>f</code> is invoked
as <code>f(t, 7)</code> not <code>t.f(7)</code>.
To construct a function that binds the receiver, use a
[<a>function literal</a>] or
[<a>method value</a>].
</p><p>
It is legal to derive a function value from a method of an interface type.
The resulting function takes an explicit receiver of that interface type.
</p></body>