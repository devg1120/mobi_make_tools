<body><p>
A function literal represents an anonymous [<a>function</a>].
</p><pre>
[<a>FunctionLit</a>] = "func" [<a>Signature</a>] [<a>FunctionBody</a>] .
</pre><pre>
func(a, b int, z float64) bool { return a*b < int(z) }
</pre><p>
A function literal can be assigned to a variable or invoked directly.
</p><pre>
f := func(x, y int) int { return x + y }
func(ch chan int) { ch <- ACK }(replyChan)
</pre><p>
Function literals are <i>closures</i>: they may refer to variables
defined in a surrounding function. Those variables are then shared between
the surrounding function and the function literal, and they survive as long
as they are accessible.
</p></body>