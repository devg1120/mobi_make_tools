<body><p>
A rune literal represents a [<a>rune constant</a>],
an integer value identifying a Unicode code point.
A rune literal is expressed as one or more characters enclosed in single quotes,
as in <code>'x'</code> or <code>'\n'</code>.
Within the quotes, any character may appear except newline and unescaped single
quote. A single quoted character represents the Unicode value
of the character itself,
while multi-character sequences beginning with a backslash encode
values in various formats.
</p><p>
The simplest form represents the single character within the quotes;
since Go source text is Unicode characters encoded in UTF-8, multiple
UTF-8-encoded bytes may represent a single integer value.  For
instance, the literal <code>'a'</code> holds a single byte representing
a literal <code>a</code>, Unicode U+0061, value <code>0x61</code>, while
<code>'ä'</code> holds two bytes (<code>0xc3</code> <code>0xa4</code>) representing
a literal <code>a</code>-dieresis, U+00E4, value <code>0xe4</code>.
</p><p>
Several backslash escapes allow arbitrary values to be encoded as
ASCII text.  There are four ways to represent the integer value
as a numeric constant: <code>\x</code> followed by exactly two hexadecimal
digits; <code>\u</code> followed by exactly four hexadecimal digits;
<code>\U</code> followed by exactly eight hexadecimal digits, and a
plain backslash <code>\</code> followed by exactly three octal digits.
In each case the value of the literal is the value represented by
the digits in the corresponding base.
</p><p>
Although these representations all result in an integer, they have
different valid ranges.  Octal escapes must represent a value between
0 and 255 inclusive.  Hexadecimal escapes satisfy this condition
by construction. The escapes <code>\u</code> and <code>\U</code>
represent Unicode code points so within them some values are illegal,
in particular those above <code>0x10FFFF</code> and surrogate halves.
</p><p>
After a backslash, certain single-character escapes represent special values:
</p><pre>
\a   U+0007 alert or bell
\b   U+0008 backspace
\f   U+000C form feed
\n   U+000A line feed or newline
\r   U+000D carriage return
\t   U+0009 horizontal tab
\v   U+000b vertical tab
\\   U+005c backslash
\'   U+0027 single quote  (valid escape only within rune literals)
\"   U+0022 double quote  (valid escape only within string literals)
</pre><p>
All other sequences starting with a backslash are illegal inside rune literals.
</p><pre>
[<a>rune_lit</a>]         = "'" ( [<a>unicode_value</a>] | [<a>byte_value</a>] ) "'" .
[<a>unicode_value</a>]    = [<a>unicode_char</a>] | [<a>little_u_value</a>] | [<a>big_u_value</a>] | [<a>escaped_char</a>] .
[<a>byte_value</a>]       = [<a>octal_byte_value</a>] | [<a>hex_byte_value</a>] .
[<a>octal_byte_value</a>] = `\` [<a>octal_digit</a>] [<a>octal_digit</a>] [<a>octal_digit</a>] .
[<a>hex_byte_value</a>]   = `\` "x" [<a>hex_digit</a>] [<a>hex_digit</a>] .
[<a>little_u_value</a>]   = `\` "u" [<a>hex_digit</a>] [<a>hex_digit</a>] [<a>hex_digit</a>] [<a>hex_digit</a>] .
[<a>big_u_value</a>]      = `\` "U" [<a>hex_digit</a>] [<a>hex_digit</a>] [<a>hex_digit</a>] [<a>hex_digit</a>]
                           [<a>hex_digit</a>] [<a>hex_digit</a>] [<a>hex_digit</a>] [<a>hex_digit</a>] .
[<a>escaped_char</a>]     = `\` ( "a" | "b" | "f" | "n" | "r" | "t" | "v" | `\` | "'" | `"` ) .
</pre><pre>
'a'
'ä'
'本'
'\t'
'\000'
'\007'
'\377'
'\x07'
'\xff'
'\u12e4'
'\U00101234'
'\''         // rune literal containing single quote character
'aa'         // illegal: too many characters
'\xa'        // illegal: too few hexadecimal digits
'\0'         // illegal: too few octal digits
'\uDFFF'     // illegal: surrogate half
'\U00110000' // illegal: invalid Unicode code point
</pre></body>