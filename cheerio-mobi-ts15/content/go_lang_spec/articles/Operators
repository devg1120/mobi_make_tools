<body><p>
Operators combine operands into expressions.
</p><pre>
[<a>Expression</a>] = [<a>UnaryExpr</a>] | [<a>Expression</a>] [<a>binary_op</a>] [<a>Expression</a>] .
[<a>UnaryExpr</a>]  = [<a>PrimaryExpr</a>] | [<a>unary_op</a>] [<a>UnaryExpr</a>] .

[<a>binary_op</a>]  = "||" | "&&" | [<a>rel_op</a>] | [<a>add_op</a>] | [<a>mul_op</a>] .
[<a>rel_op</a>]     = "==" | "!=" | "<" | "<=" | ">" | ">=" .
[<a>add_op</a>]     = "+" | "-" | "|" | "^" .
[<a>mul_op</a>]     = "*" | "/" | "%" | "<<" | ">>" | "&" | "&^" .

[<a>unary_op</a>]   = "+" | "-" | "!" | "^" | "*" | "&" | "<-" .
</pre><p>
Comparisons are discussed [<a>elsewhere</a>].
For other binary operators, the operand types must be [<a>identical</a>]
unless the operation involves shifts or untyped [<a>constants</a>].
For operations involving constants only, see the section on
[<a>constant expressions</a>].
</p><p>
Except for shift operations, if one operand is an untyped [<a>constant</a>]
and the other operand is not, the constant is implicitly [<a>converted</a>]
to the type of the other operand.
</p><p>
The right operand in a shift expression must have integer type
or be an untyped constant [<a>representable</a>] by a
value of type <code>uint</code>.
If the left operand of a non-constant shift expression is an untyped constant,
it is first implicitly converted to the type it would assume if the shift expression were
replaced by its left operand alone.
</p><pre>
var s uint = 33
var i = 1<<s                  // 1 has type int
var j int32 = 1<<s            // 1 has type int32; j == 0
var k = uint64(1<<s)          // 1 has type uint64; k == 1<<33
var m int = 1.0<<s            // 1.0 has type int; m == 0 if ints are 32bits in size
var n = 1.0<<s == j           // 1.0 has type int32; n == true
var o = 1<<s == 2<<s          // 1 and 2 have type int; o == true if ints are 32bits in size
var p = 1<<s == 1<<33         // illegal if ints are 32bits in size: 1 has type int, but 1<<33 overflows int
var u = 1.0<<s                // illegal: 1.0 has type float64, cannot shift
var u1 = 1.0<<s != 0          // illegal: 1.0 has type float64, cannot shift
var u2 = 1<<s != 1.0          // illegal: 1 has type float64, cannot shift
var v float32 = 1<<s          // illegal: 1 has type float32, cannot shift
var w int64 = 1.0<<33         // 1.0<<33 is a constant shift expression
var x = a[1.0<<s]             // 1.0 has type int; x == a[0] if ints are 32bits in size
var a = make([]byte, 1.0<<s)  // 1.0 has type int; len(a) == 0 if ints are 32bits in size
</pre><h4>Operator precedence</h4><p>
Unary operators have the highest precedence.
As the  <code>++</code> and <code>--</code> operators form
statements, not expressions, they fall
outside the operator hierarchy.
As a consequence, statement <code>*p++</code> is the same as <code>(*p)++</code>.
</p><p>
There are five precedence levels for binary operators.
Multiplication operators bind strongest, followed by addition
operators, comparison operators, <code>&&</code> (logical AND),
and finally <code>||</code> (logical OR):
</p><pre>
Precedence    Operator
    5             *  /  %  <<  >>  &  &^
    4             +  -  |  ^
    3             ==  !=  <  <=  >  >=
    2             &&
    1             ||
</pre><p>
Binary operators of the same precedence associate from left to right.
For instance, <code>x / y * z</code> is the same as <code>(x / y) * z</code>.
</p><pre>
+x
23 + 3*x[i]
x <= f()
^a >> b
f() || g()
x == y+1 && <-chanPtr > 0
</pre></body>