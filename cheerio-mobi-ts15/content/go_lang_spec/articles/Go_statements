<body><p>
A "go" statement starts the execution of a function call
as an independent concurrent thread of control, or <i>goroutine</i>,
within the same address space.
</p><pre>
[<a>GoStmt</a>] = "go" [<a>Expression</a>] .
</pre><p>
The expression must be a function or method call; it cannot be parenthesized.
Calls of built-in functions are restricted as for
[<a>expression statements</a>].
</p><p>
The function value and parameters are
[<a>evaluated as usual</a>]
in the calling goroutine, but
unlike with a regular call, program execution does not wait
for the invoked function to complete.
Instead, the function begins executing independently
in a new goroutine.
When the function terminates, its goroutine also terminates.
If the function has any return values, they are discarded when the
function completes.
</p><pre>
go Server()
go func(ch chan<- bool) { for { sleep(10); ch <- true }} (c)
</pre></body>